<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html#-->
<!--sql映射文件: namespace必须为实现接口名；每个sql是一个statement-->
<mapper namespace="cn.aezo.springboot.datasource.UserMapperXml">
    <!--resultMap结果集映射定义(用来描述如何从数据库结果集中来加载对象). resultType 与resultMap 不能并用-->
    <resultMap id="UserInfoResultMap" type="cn.aezo.springboot.datasource.model.UserInfo">
        <!--设置mybatis.configuration.map-underscore-to-camel-case=true则会自动对格式进行转换, 无效下面转换-->
        <!--<result column="group_id" property="groupId" jdbcType="BIGINT"/>-->
        <!--<result column="nick_name" property="nickName" jdbcType="VARCHAR"/>-->
    </resultMap>

    <!--sql:可被其他语句引用的可重用语句块. id:唯一的标识符，可被其它语句引用-->
    <sql id="UserInfoColumns"> id, group_id, nick_name, hobby </sql>

    <!--id对应接口的方法名; resultType 与resultMap 不能并用; -->
    <!-- statementType: STATEMENT(statement)、PREPARED(preparedstatement, 默认)、CALLABLE(callablestatement)-->
    <!-- resultSetType: FORWARD_ONLY(游标向前滑动)，SCROLL_SENSITIVE(滚动敏感)，SCROLL_INSENSITIVE(不区分大小写的滚动)-->
    <select id="findAll" resultMap="UserInfoResultMap">
        select
        <include refid="UserInfoColumns"/>
        from user_info
    </select>

    <!--parameterType传入参数类型. 使用typeAliases进行类型别名映射后可写成resultType="userInfo"(自动扫描包mybatis.type-aliases-package, 默认该包下的类名首字母小写为别名) -->
    <!--如果返回结果使用resultType="cn.aezo.springboot.mybatis.model.UserInfo", 则nickName，groupId则为null. 此处使用resultMap指明字段对应关系-->
    <!-- #{}是实现的是PrepareStatement，${}实现的是普通Statement -->
    <select id="getOne" parameterType="java.lang.Long" resultType="userInfo">
        select
        <include refid="UserInfoColumns"/>
        from user_info
        where id = #{id}
    </select>

    <insert id="insert" parameterType="cn.aezo.springboot.datasource.model.UserInfo">
        insert into
        user_info
        (nick_name, group_id, hobby)
        values
        (#{nickName}, #{groupId}, #{hobby})
    </insert>

    <update id="update" parameterType="cn.aezo.springboot.datasource.model.UserInfo">
        update
        user_info
        set
        <!--动态sql, 标签：if、choose (when, otherwise)、trim (where, set)、foreach-->
        <if test="nickName != null">nick_name = #{nickName},</if>
        hobby = #{hobby}
        where
        id = #{id}
    </update>

    <delete id="delete" parameterType="java.lang.Long">
        delete from
        user_info
        where
        id = #{id}
    </delete>
</mapper>